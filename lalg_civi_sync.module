<?php

//********************************************************************
// Skeleton for a module to Sync Froupal Groups with Civi Organisations, etc.
//********************************************************************

// *****************  Initial doodling  *************

use \Drupal\Core\Entity\EntityInterface;
use \Drupal\Group\GroupInterface;
use \Drupal\Core\Field\FieldItemInterface;
use \Drupal\Core\TypedData\TypedDataInterface;

//use \Drupal\Core\Session\AccountInterface; 
 
//********* Patterns for reading Entity Field Values  **************
// $entity->id;							// Gets a FieldItemList object (with one item)
// $entity->get('id')->getValue();		// Gets an array with one item being the value
// $entity->id->value;					// Gets the Value of the Id
// $entity->get('id')->value;			// Gets the Value of the Id
// $entity->label->value;				// Gets the Value of the Label (Title)
// $entity->label->getString();			// Another way to stringify the value

// $alias = \Drupal::service('path_alias.manager')->getAliasByPath('/group/' . $entity->id->value);
// dpm('Alias: ' . $alias);

//**************  Patterns for Hooks  **********************
/**
 * Implements hook_entity_insert().
 * Similarly for hook_entity_update() and hook_entity_delete()
 */
// function lalg_civi_sync_entity_insert(\Drupal\Core\Entity\EntityInterface $entity) {
  // dpm('Insert: ' . $entity->getEntityTypeId());
// }

// function lalg_civi_sync_group_insert(\Drupal\Core\Entity\EntityInterface $entity) {
// dpm('Hook Insert Group');
// }
 
// function lalg_civi_sync_group_content_insert(\Drupal\Core\Entity\EntityInterface $entity) {
// dpm('Hook Insert Group_Content');
// }


/************************************************************************
/*  PseudoCode
/************************************************************************
/*
Hook Group Create ()
  Process Action (Group, Action)

Hook Group Update ()
  Process Action (Group, Action)

Hook Group Delete ()
  Process Action (Group, Action)

Hook GroupContent Create ()
  Process Action (GroupContent, Action)

Hook GroupContent Update ()					// Not sure this ever happens
  Process Action (GroupContent, Action)

Hook GroupContent Delete ()
  Process Action (GroupContent, Action)
  
Process Group Action (Group, Action)
  Get Group details - Id -> Organisation Ext Id
  Get list of Organisations with that Ext Id 
  If None exist
    Check none in Trash
      If in Trash
        Delete Organisation()  	// Now definitely none.
    If Create 
	  Create Organisation()
	If Update
	  Create Organisation()
	  Update Organisation()			// Probably redundent
	If Delete
	  Return 
  If 1
    If Create 
	  Delete Organisation() 
	  Create Organisation()
	If Update 
	  Update Organisation()
	If Delete 
	  Delete Organisation()
  If >1
    Throw Error 

Process GroupContent Action (GroupContent, Action)	
  Check Organisation and User exist
  If not
    Throw Error
  Get matching Civi Relationship(s)
  If None Exist
    Check none in Trash
      If in Trash
        Delete Relationship()  	// Now definitely none.    
    If Create 
      Create Relationship()
    If Delete 
	  Return
  If 1
    If Create 
      Delete Relationship()
      Create Relationship()	  
    If Delete 
      Delete Relationship()
  If >1
    Throw Error 	  

	
*/

/************************************************************************
/*  Hooks for Group changes 
/************************************************************************

/**
 * Implements hook_entity_insert().
 */
function lalg_civi_sync_entity_insert(\Drupal\Core\Entity\EntityInterface $entity) {
dpm('Insert: ' . $entity->getEntityTypeId());
}


/**
 * Implements hook_entity_update().
 */
function lalg_civi_sync_entity_update(Drupal\Core\Entity\EntityInterface $entity) {
dpm('Update: ' . $entity->getEntityTypeId());	
return;
  if ($entity->getEntityTypeId() == 'group') {
    // Call function to check Group synched properly	  
//	check_group_entity($entity);
  }
}

/**
 * Implements hook_entity_delete().
 */
 function lalg_civi_sync_entity_delete(Drupal\Core\Entity\EntityInterface $entity) {
  dpm('Delete: ' . $entity->getEntityTypeId());	
}
 


 
 
/************************************************************************
/*  Process the changes 
/************************************************************************ 
 

/**
 *  Checks that the linked Organisation exists, and if not creates it.
 *  Checks and corrects the Organisation's attributes.
 *  Checks and corrects the Relationships to Group members / Civi Contacts
 */
function check_group_entity($group) {
  \Drupal::service('civicrm')->initialize();		// Prepare to use CiviCRM API
  
  $gid = $group->id;

  // Look for corresponding Organisation
  $orgs = civicrm_api4('Contact', 'get', [
    'select' => [
      'id', 
      'organization_name',
	  'is_deleted',
    ],
    'where' => [  
      ['external_identifier', '=', $gid], 
      ['contact_type', '=', 'Organization'],
    ],
  ]);  
	
  if (count($orgs) == 0) {
	// Create a new Organisation Contact
    createOrganisation($group);
  }
  else if (count($orgs) > 1) {
	// Throw Error.  External Id must be unique   
dpm('Throw error - duplicate Ext Id');	
  }
  else {
	// Organisation already exists, so ...
	// Check if in Trash
	
    // Now check Attributes
dpm('Checking Attributes');  
  }
}
 
 
/**
 * Creates a new CiviCRM Organisation Contact, corresponding to the given Drupal Group Entity
 */
function createOrganisation($group) {
dpm('Create Organisation');	
  //Collect the parameters needed
  $gid = $group->id->value;
  $gTitle = $group->label->value;	
  $gAlias = \Drupal::service('path_alias.manager')->getAliasByPath('/group/' . $gid);
//************** Remove leading /
  
  // Create the Organisation
  $results = civicrm_api4('Contact', 'create', [
    'values' => [
      'contact_type' => 'Organization', 
      'external_identifier' => $gid, 
      'organization_name' => $gTitle,
    ],
  ]);
// dpm($results); 
 
  $orgId = $results[0]['id'];
dpm($orgId);

  // Add the Email address
  $results = civicrm_api4('Email', 'create', [
    'values' => [
      'contact_id' => $orgId, 
      'email' => $gAlias . '@lalg.org.uk', 
      'is_primary' => TRUE, 
      'location_type_id:name' => 'Home',
    ],
  ]);
  
}
  
 

//********************  Not sure if this does anything useful  ************************

/**
 * Alter the links for the group_operations block.
 *
 * @param array $operations
 *   A list of links to be set in an 'operations' element.
 * @param GroupInterface $group
 *   The group to alter the operations for.
 *
 * @see \Drupal\group\Plugin\Block\GroupOperationsBlock
 * @see \Drupal\Core\Render\Element\Dropbutton
 */
// function lalg_wf_utils_group_operations_alter(&$operations, $group) {
  // dpm($group->label());
  // dpm($operations);
  // dpm($group);
// }

