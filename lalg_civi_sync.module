<?php

//********************************************************************
// Skeleton for a module to Sync Froupal Groups with Civi Organisations, etc.
//********************************************************************

// *****************  Initial doodling  *************

use \Drupal\Core\Entity\EntityInterface;
use \Drupal\Group\GroupInterface;
use \Drupal\Core\Field\FieldItemInterface;
use \Drupal\Core\TypedData\TypedDataInterface;

//use \Drupal\Core\Session\AccountInterface; 
 
//********* Patterns for reading Entity Field Values  **************
// $entity->id;							// Gets a FieldItemList object (with one item)
// $entity->get('id')->getValue();		// Gets an array with one item being the value
// $entity->id->value;					// Gets the Value of the Id
// $entity->get('id')->value;			// Gets the Value of the Id
// $entity->label->value;				// Gets the Value of the Label (Title)
// $entity->label->getString();			// Another way to stringify the value

// $alias = \Drupal::service('path_alias.manager')->getAliasByPath('/group/' . $entity->id->value);
// dpm('Alias: ' . $alias);

//**************  Patterns for Hooks  **********************
/**
 * Implements hook_entity_insert().
 * Similarly for hook_entity_update() and hook_entity_delete()
 */
// function lalg_civi_sync_entity_insert(\Drupal\Core\Entity\EntityInterface $entity) {
  // dpm('Insert: ' . $entity->getEntityTypeId());
// }

// function lalg_civi_sync_group_insert(\Drupal\Core\Entity\EntityInterface $entity) {
// dpm('Hook Insert Group');
// }
 
// function lalg_civi_sync_group_content_insert(\Drupal\Core\Entity\EntityInterface $entity) {
// dpm('Hook Insert Group_Content');
// }


/************************************************************************
/*  PseudoCode
/************************************************************************
/*
Hook Group Create ()
  Process Action (Action, Group)

Hook Group Update ()
  Process Action (Action, Group)

Hook Group Delete ()
  Process Action (Action, Group)

Hook GroupContent Create ()
  Process Action (GroupContent, Action)

Hook GroupContent Update ()					// Not sure this ever happens
  Process Action (GroupContent, Action)

Hook GroupContent Delete ()
  Process Action (GroupContent, Action)
  
Process Group Action (Action, Group)
  Get Group details - Id -> Organisation Ext Id
  Get list of Organisations with that Ext Id 
  If None exist
    Check none in Trash
      If in Trash
        Delete Organisation()  	// Now definitely none.
    If Create 
	  Create Organisation()
	If Update
	  Create Organisation()
	  Update Organisation()			// Probably redundent
	If Delete
	  Return 
  If 1
    If Create 
	  Delete Organisation() 
	  Create Organisation()
	If Update 
	  Update Organisation()
	If Delete 
	  Delete Organisation()
  If >1
    Throw Error 

Process GroupContent Action (GroupContent, Action)	
  Check Organisation and User exist
  If not
    Throw Error
  Get matching Civi Relationship(s)
  If None Exist
    Check none in Trash
      If in Trash
        Delete Relationship()  	// Now definitely none.    
    If Create 
      Create Relationship()
    If Delete 
	  Return
  If 1
    If Create 
      Delete Relationship()
      Create Relationship()	  
    If Delete 
      Delete Relationship()
  If >1
    Throw Error 	  

	
*/

//************************************************************************
//*  Group/Organisation Processing 
//************************************************************************

//**************************  Hooks  ******************************

/**
 * Implements hook_entity_type_insert().
 */
function lalg_civi_sync_group_insert(\Drupal\Core\Entity\EntityInterface $group) {
	processGroupAction('create', $group);
}

/**
 * Implements hook_entity_type_update().
 */
function lalg_civi_sync_group_update(Drupal\Core\Entity\EntityInterface $group) {
	processGroupAction('update', $group);
}

/**
 * Implements hook_entity_type_delete().
 */
 function lalg_civi_sync_group_delete(Drupal\Core\Entity\EntityInterface $group) {
	processGroupAction('delete', $group);
}
 
//******************************  Processing the Actions  ***************** 

/*
 * See pseudocode above
 */
function processGroupAction($action, $group) {
dpm('Process Group Action: ' . $action);

	//	Ignore if the Group is Private, or is Hidden or Team
	$gType = $group->getGroupType()->get('label');
//dpm($gType);
	$gGroupType = $group->get('field_group_type')->getString();
//dpm($gGroupType);
	if ($gType != 'Public' || $gGroupType == '15' || $gGroupType == '201') {
		return;
	}
	
	\Drupal::service('civicrm')->initialize();		// Prepare to use CiviCRM API
  
	$oExtId = 'CiviSync' . $group->id->value;			// Organisation External Id
	
	// Look for the corresponding Organisation
	$orgs = civicrm_api4('Contact', 'get', [
		'select' => [
			'id', 
		],
		'where' => [  
			['external_identifier', '=', $oExtId], 
			['contact_type', '=', 'Organization'],
		],
	]); 	
  
	// Check number of results returned
dpm('Count of Organisations: ' . count($orgs));
	if (count($orgs) == 0) {
		// Check if there is actually one in Trash
		$orgsTrash = civicrm_api4('Contact', 'get', [
			'select' => [
				'id', 
			],
			'where' => [  
				['external_identifier', '=', $oExtId], 
				['contact_type', '=', 'Organization'],
				['is_deleted', '=', TRUE],
			],
		]);	 
 
		if (count($orgsTrash) > 0) {
			deleteOrganisation($orgsTrash[0]['id']);
		}	  
		// Now definitely no existing Organisation.
	
		if ($action == 'create') {
			createOrganisation($group, $oExtId);
		}
		else if ($action == 'update') {
			createOrganisation($group, $oExtId);
			updateOrganisation($group, $orgs[0]['id'], $oExtId);			// Probably don't need this since duplicates create 
		}
		// No action to take if 'Delete'
	}											// End No Organisation exists	
  
	else if (count($orgs) == 1) {
		if ($action == 'create') {
			deleteOrganisation($orgs[0]['id']);	
			createOrganisation($group, $oExtId);
		}
		else if ($action == 'update') {
			updateOrganisation($group, $orgs[0]['id'], $oExtId);	
		}
		else if ($action == 'delete') {
			deleteOrganisation($orgs[0]['id']);
		}
	}												// End of One Organisation exists
  
	else {									// More than one - illegal.
		fatalError('Found illegal duplicate Organisations with External Id: ' . $oExtId); 
	}
}

 
/**
 * Creates a new CiviCRM Organisation Contact, corresponding to the given Drupal Group Entity
 */
function createOrganisation($group, $oExtId) {
dpm('Create Organisation');	
	//Collect the parameters needed
	$gTitle = $group->label->value;	
	$gAlias = \Drupal::service('path_alias.manager')->getAliasByPath('/group/' . $group->id->value);
	// Remove slashes from Alias
	$oEmail = preg_replace("/\//", "", $gAlias);
  
	// Create the Organisation
	$results = civicrm_api4('Contact', 'create', [
		'values' => [
			'contact_type' => 'Organization', 
			'external_identifier' => $oExtId, 
			'organization_name' => $gTitle,
		],
	]);
// dpm($results); 
 
	$oid = $results[0]['id'];
dpm($oid);

	// Add the Email address
	$results = civicrm_api4('Email', 'create', [
		'values' => [
			'contact_id' => $oid, 
			'email' => $oEmail . '@lalg.org.uk', 
			'is_primary' => TRUE, 
			'location_type_id:name' => 'Home',
		],
	]);
  
}
  

function updateOrganisation ($group, $oid, $oExtId) {
dpm('Update Organisation');
	
}
 
function deleteOrganisation($oid) {
dpm('Delete Organisation');	
}

function fatalError ($message) {
  \Drupal::logger('lalg_civi_sync')->error($message);  
  drupal_set_message('Action Abandoned. ' . $message, 'error');
}



